#include "DHT.h"
#define DHTPIN 9
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);
unsigned long mlsOfDHT = 0;
uint8_t dhtLog = 5;
int dhtLogT[5], dhtLogTCal = 1,calHBuff=0;
int dhtLogH[5], dhtLogHCal = 1;
int dhtLogHI[5];

#include "AMJoystick.h"
AMJoystick Joystick(A0, A1, 2);
int readX;
int readY;
unsigned long mlsOfJoystickUpdate = 0;
bool joystickReady = true;

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
bool displayUpdate = true;
#define LOGO_HEIGHT   20
#define LOGO_WIDTH    20
static const unsigned char PROGMEM logo[] =
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x1f, 0xcf, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0xfe, 0x1f, 0xe7, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x9f, 0xe7, 0xf8, 0x00, 0x00, 
	0x00, 0x01, 0xfe, 0xdf, 0xe7, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xfc, 0xcf, 0xe7, 0xf8, 0x00, 0x00, 
	0x00, 0x03, 0xfd, 0xcf, 0xf3, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xfd, 0xcf, 0xf3, 0xfc, 0x00, 0x00, 
	0x00, 0x03, 0xfd, 0xef, 0xf3, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xfd, 0xe7, 0xfb, 0xfc, 0x00, 0x00, 
	0x00, 0x03, 0xfb, 0xe7, 0xf9, 0xfc, 0x00, 0x00, 0x00, 0x07, 0xfb, 0xf7, 0xf9, 0xfe, 0x00, 0x00, 
	0x00, 0x07, 0xfb, 0xf3, 0xf9, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xf3, 0xf3, 0xfd, 0xfe, 0x00, 0x00, 
	0x00, 0x0f, 0xf7, 0xf3, 0xfc, 0xff, 0x00, 0x00, 0x00, 0x0f, 0xf7, 0xfb, 0xfc, 0xff, 0x00, 0x00, 
	0x00, 0x0f, 0xf7, 0xf9, 0xfc, 0xff, 0x00, 0x00, 0x00, 0x1f, 0xe7, 0xf9, 0xfe, 0x7f, 0x80, 0x00, 
	0x00, 0x1f, 0xe3, 0xf9, 0xfe, 0x7f, 0x80, 0x00, 0x00, 0x1f, 0xe3, 0xfd, 0xfe, 0x7f, 0x80, 0x00, 
	0x00, 0x1f, 0xc3, 0xfc, 0xfe, 0x7f, 0x80, 0x00, 0x00, 0x3f, 0xc3, 0xfc, 0xff, 0x3f, 0xc0, 0x00, 
	0x00, 0x3f, 0xc1, 0xfc, 0xff, 0x3f, 0xc0, 0x00, 0x00, 0x3f, 0xc1, 0xfe, 0xff, 0x3f, 0xc0, 0x00, 
	0x00, 0x3f, 0x81, 0xfe, 0x7f, 0xbf, 0xc0, 0x00, 0x00, 0x7f, 0x81, 0xfe, 0x7f, 0x9f, 0xe0, 0x00, 
	0x00, 0x7f, 0x80, 0xff, 0x7f, 0x9f, 0xe0, 0x00, 0x00, 0x7f, 0x80, 0xff, 0x3f, 0x9f, 0xe0, 0x00, 
	0x00, 0x7f, 0x00, 0xff, 0x3f, 0xdf, 0xe0, 0x00, 0x00, 0xff, 0x00, 0x7f, 0x3f, 0xcf, 0xf0, 0x00, 
	0x00, 0xff, 0x00, 0x7f, 0xbf, 0xcf, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

int page = 1;
int selector = 1;
void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  Serial.println(F("DHT22 test!"));
  dht.begin();
  


  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }
  display.clearDisplay();
  display.drawBitmap(34, 2, logo, 60, 60, WHITE);
  display.display();
  delay(500); // Pause for 2 seconds
}

void loop() {
  if( millis() > mlsOfDHT){
    master_dht();
    displayUpdate = true;
    mlsOfDHT = millis()+3000;
    Serial.println("");
  }
  if(displayUpdate == true){
    master_ssd1306();
  }
  master_joystick();
}
